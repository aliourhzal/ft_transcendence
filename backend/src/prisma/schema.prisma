datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
	id				            String          @id @default(uuid())
	intra_id		            Int	            @unique
	firstName		            String
	lastName		            String
	nickname		            String          @unique
	email			            String
	wallet			            Int
	points			            Int
	password		            String
	profilePic		            String
	coverPic		            String
	level			            Float
	grade			            String
	
	userFriends                 User[]              @relation("friends")
    friendOfUser                User[]              @relation("friends")

 
	messages                    Messages[]
    rooms                   JoinedTable[]
    bannedUsers                   BlackList[]

	matches			Match[]
}

model Room{

    id              String      @id @default(uuid())
    room_name       String      @unique    
    password        String?

	roomType    RoomType     	@default(PUBLIC)

	messages                    Messages[]

    users                       JoinedTable[]
    bannedusers                       BlackList[]
}
 

model Messages {

    id                  String          @id @default(uuid())
    text                String

    user                User	 @relation(fields: [userId], references: [id])
    userId              String  
    
    room                Room @relation(fields: [roomId], references: [id])
    roomId              String  

}

model JoinedTable{  

    user                User       @relation(fields: [userId], references: [id])
    userId              String  
	userType    UserType     	@default(USER)

    room                Room        @relation(fields: [roomId], references: [id]) // not compile in the query
    roomId              String 

    isBanned            UserBnned     	@default(UNBANNED)

    isMuted              UserMUTE    	@default(UNMUTED)

    banExpiresAt        DateTime?
    muteExpiresAt        DateTime?

    createdAt  DateTime   @default(now())  // Add this field to track creation date

    @@id([userId, roomId])
}

model BlackList{
    
    user                User       @relation(fields: [userId], references: [id])
    userId              String  
	userType    UserType     	@default(USER)

    room                Room        @relation(fields: [roomId], references: [id]) // not compile in the query
    roomId              String 

    isBanned            UserBnned     	@default(UNBANNED)
    isMuted              UserMUTE    	@default(UNMUTED)

    banExpiresAt        DateTime?
    muteExpiresAt        DateTime?

    createdAt  DateTime   @default(now())  // Add this field to track creation date

    @@id([userId, roomId])
}

model Match {
	id			String @id @default(uuid())
	players		User[]
	scores		Int[]
	playerAt	DateTime @default(now())
}

model FriendRequest {
    
	id			String @id @default(uuid())
	
}

enum RoomType {
    PUBLIC 
    PROTECTED 
    PRIVATE 
}

enum UserType {
    USER
    ADMIN
    OWNER
}

enum UserBnned {
    BANNEDFORLIMMITED_TIME
    BANNEDUNLIMMITED_TIME
    UNBANNED
}


enum UserMUTE {
    MUTEDFORLIMITEDTIME
    MUTEDFOREVER
    UNMUTED
}